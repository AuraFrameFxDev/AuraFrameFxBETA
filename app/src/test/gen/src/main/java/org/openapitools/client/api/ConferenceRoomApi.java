/*
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ConferenceRoom;
import org.openapitools.client.model.ConferenceRoomCreateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConferenceRoomApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConferenceRoomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConferenceRoomApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for conferenceCreatePost
     *
     * @param conferenceRoomCreateRequest (required)
     * @param _callback                   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Conference room created successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call conferenceCreatePostCall(ConferenceRoomCreateRequest conferenceRoomCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conferenceRoomCreateRequest;

        // create path and map variables
        String localVarPath = "/conference/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{"OAuth2AuthCode"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conferenceCreatePostValidateBeforeCall(ConferenceRoomCreateRequest conferenceRoomCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceRoomCreateRequest' is set
        if (conferenceRoomCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'conferenceRoomCreateRequest' when calling conferenceCreatePost(Async)");
        }

        return conferenceCreatePostCall(conferenceRoomCreateRequest, _callback);

    }

    /**
     * Create a new AI conference room
     *
     * @param conferenceRoomCreateRequest (required)
     * @return ConferenceRoom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Conference room created successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * </table>
     */
    public ConferenceRoom conferenceCreatePost(ConferenceRoomCreateRequest conferenceRoomCreateRequest) throws ApiException {
        ApiResponse<ConferenceRoom> localVarResp = conferenceCreatePostWithHttpInfo(conferenceRoomCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new AI conference room
     *
     * @param conferenceRoomCreateRequest (required)
     * @return ApiResponse&lt;ConferenceRoom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Conference room created successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ConferenceRoom> conferenceCreatePostWithHttpInfo(ConferenceRoomCreateRequest conferenceRoomCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = conferenceCreatePostValidateBeforeCall(conferenceRoomCreateRequest, null);
        Type localVarReturnType = new TypeToken<ConferenceRoom>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new AI conference room (asynchronously)
     *
     * @param conferenceRoomCreateRequest (required)
     * @param _callback                   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Conference room created successfully </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid request format or parameters </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Authentication credentials were missing or incorrect </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call conferenceCreatePostAsync(ConferenceRoomCreateRequest conferenceRoomCreateRequest, final ApiCallback<ConferenceRoom> _callback) throws ApiException {

        okhttp3.Call localVarCall = conferenceCreatePostValidateBeforeCall(conferenceRoomCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ConferenceRoom>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
